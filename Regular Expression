'''
정규 표현식(Regular Expression)은 문자열의 패턴을 표현하기 위한 형식 언어입니다. 주로 문자열 검색, 대체, 추출, 분리 등의 작업에서 사용되며, 다양한 프로그래밍 언어와 텍스트 편집기에서 지원됩니다.

정규 표현식은 문자열에 포함된 문자의 조합을 표현하는 패턴을 정의합니다. 이러한 패턴은 특정 문자, 숫자, 기호, 공백 등을 찾거나 특정한 규칙을 가진 문자열을 매칭하는 데 사용됩니다. 정규 표현식은 간단한 패턴부터 복잡한 패턴까지 다양한 경우에 유용하게 쓰일 수 있습니다.

정규 표현식은 일반적으로 특수한 문자와 기호를 사용하여 패턴을 표현합니다. 예를 들면 다음과 같은 것들이 있습니다:

정확한 문자열 매칭: "hello"는 문자열에서 "hello"라는 정확한 패턴을 찾습니다.
문자 범위: [0-9]는 0부터 9까지의 숫자 중 하나를 의미합니다.
반복: *은 앞의 패턴이 0회 이상 반복되는 것을 의미합니다.
대체: |는 주어진 패턴 중 하나를 선택하는 것을 의미합니다.
정규 표현식은 각 프로그래밍 언어나 텍스트 편집기마다 약간의 차이가 있을 수 있으며, 각각의 문법과 규칙을 따라야 합니다. 정규 표현식을 사용하면 텍스트 처리 작업을 더욱 효율적으로 수행할 수 있으며, 문자열의 복잡한 패턴을 일치시키는 데 유용합니다.
'''

import re

# match = pattern.match(문자열) : 문자열의 시작부터 패턴을 찾습니다.
# search = pattern.search(문자열) : 문자열 전체에서 패턴을 찾습니다.
# findall = pattern.findall(문자열) : 문자열에서 패턴과 일치하는 모든 부분을 찾아 리스트로 반환합니다.

pattern = re.compile(r'^Hello')
result1 = pattern.match('Hello, World!')
if (result1):
  print(result1)
else:
  print("못찾음")

pattern = re.compile(r'World')
result1 = pattern.search('Hello, World!')
if (result1):
  print(result1)
else:
  print("못찾음")

text = "문자열에서 전화번호 010-1234-5678을 추출"
phone_numbers = re.findall(r'\d{3}-\d{4}-\d{4}', text)
print(phone_numbers)
